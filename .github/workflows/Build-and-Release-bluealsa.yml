name: Build and Release bluealsa For Armbian TVbox

on:
  push:
    paths:
      - 'bluez-alsa/**'
      - '*.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      
    - name: Set up build environment
      run: |
        sudo apt-get update -y
        sudo apt-get install git automake build-essential libtool pkg-config python3-docutils -y
        sudo apt-get install libasound2-dev libbluetooth-dev libdbus-1-dev libglib2.0-dev libsbc-dev -y
        sudo apt-get install check libfdk-aac-dev lcov libldacbt-enc-dev libldacbt-abr-dev libbsd-dev libopenaptx-dev libunwind-dev libmpg123-dev libmp3lame-dev libncurses-dev libreadline-dev libspandsp-dev bluez bluez-alsa-utils -y
        
    - name: Clone source code
      run: git clone https://github.com/arkq/bluez-alsa.git
      
    - name: Get version from source code
      id: get_version
      run: echo ::set-output name=VERSION::$(awk '/^AC_INIT/{print $2}' configure.ac | sed 's/\[//g' | sed 's/\]//g')
      
    - name: Build preparation
      run: |
        cd bluez-alsa
        autoreconf --install --force
      
    - name: Configure and build
      run: |
        cd bluez-alsa/build
        ../configure --enable-aac --enable-aptx --enable-aptx-hd --with-libopenaptx --enable-faststream --enable-ldac --enable-mp3lame --enable-mpg123 --enable-msbc --enable-ofono --enable-upower --disable-payloadcheck --enable-a2dpconf --enable-cli --enable-rfcomm --enable-hcitop --enable-manpages --enable-test --with-coverage --with-systemdbluealsaargs=ARGS --with-systemdbluealsaaplayargs=ARGS
        make
        
    - name: Create release package
      run: |
        cd bluez-alsa/build
        make install DESTDIR=/tmp/bluealsa-package
        fpm -s dir -t deb -n bluealsa -v ${{ steps.get_version.outputs.VERSION }} -C /tmp/bluealsa-package --architecture arm64
        
    - name: Upload release package
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: bluealsa_${{ steps.get_version.outputs.VERSION }}_arm64.deb
        asset_name: bluealsa_${{ steps.get_version.outputs.VERSION }}_arm64.deb
        asset_content_type: application/gzip
